metadata:
  version: 1
  description: MDE Queries based on OSINT CTI queries.
  data_environments: ["MDE","M365D"]
  data_families: ["mstical_credential_access", "MDE"]
  tags: ["mstical_credential_access","credential_access"]
defaults:
  metadata:
    data_source: "hunting_queries"
  parameters:
    table_email:
      description: Table Name
      type: string
      default: EmailAttachmentInfo
    table_network:
      description: Table Name
      type: string
      default: DeviceNetworkEvents
    table_device:
      description: Table Name
      type: string
      default: DeviceEvents
    table_file:
      description: Table Name
      type: string
      default: DeviceFileEvents
    table_process:
      description: Table Name
      type: string
      default: DeviceProcessEvents
    table_registry:
      description: Table Name
      type: string
      default: DeviceRegistryEvents
    start:
      description: Query start time
      type: datetime
      default: -1
    end:
      description: Query end time
      type: datetime
      default: 0
    add_query_items:
      description: additional querie clause e.g project
      type: str
      default: ""
sources:
  changes_to_tier_zero_groups:
    description: This query shows all modifications to highly sensitive active directory groups (also known as Tier 0). 
    metadata:
    args:
      query: |-
        let Events = materialize (
        IdentityDirectoryEvents
        | where ActionType == 'Group Membership changed'
        | extend ActivityType = iff(isnotempty(tostring(AdditionalFields['TO.GROUP'])),"Added Account", "Removed Account")
        | where isnotempty(AccountSid)
        );
        let Tier0Adds = (
        Events
        | where ActivityType == "Added Account"
        | extend TargetGroup = tostring(AdditionalFields['TO.GROUP'])
        | extend TargetObject = iff(isempty(tostring(AdditionalFields['TARGET_OBJECT.USER'])), tostring(AdditionalFields['TARGET_OBJECT.GROUP']), tostring(AdditionalFields['TARGET_OBJECT.USER']))
        | extend TargetType = iff(isempty(tostring(AdditionalFields['TARGET_OBJECT.USER'])), "Security Group", "User Account")
        );
        let Tier0Removes = (
        Events
        | where ActivityType == "Removed Account"
        | extend TargetGroup = tostring(AdditionalFields['FROM.GROUP'])
        | extend TargetObject = iff(isempty(tostring(AdditionalFields['TARGET_OBJECT.USER'])),tostring(AdditionalFields['TARGET_OBJECT.GROUP']), tostring(AdditionalFields['TARGET_OBJECT.USER']))
        | extend TargetType = iff(isempty(tostring(AdditionalFields['TARGET_OBJECT.USER'])), "Security Group", "User Account")
        );
        let Tier0Groups = datatable(TargetGroup:string)
        [{tier_0_groups}];
        Tier0Groups
        | join (union Tier0Adds, Tier0Removes) on TargetGroup
        | project Timestamp, ActionType, ActivityType,TargetType, ActorUpn=AccountUpn, TargetObject, TargetAccountUpn, TargetGroup
    parameters:
      tier_0_groups:
        description: list of tier 0 groups
        type: list
        default:
          - Enterprise Admins
          - Domain Admin
          - Domain Controllers
          - Administrators
          - Enterprise Key Admins
          - Account Operators
          - Organization Management
          - Backup Operators
          - RTCDomainServerAdmins
          - ENTERPRISE DOMAIN CONTROLLERS
          - Cert Publishers
          - Schema Admins
          - DnsAdmins
          - Exchange Recipient Administrators
          - Replicator
          - Read-Only Domain Controllers
          - Print Operators
  procdump_dumping_lsass:
    description: This query looks for procdump dumping LSASS.
    metadata:
    args:
      query: |-
        {table_process}
        | where Timestamp >= datetime({start})
        | where Timestamp <= datetime({end})
        | where (ProcessCommandLine has "lsass" and (ProcessCommandLine has "-accepteula" or ProcessCommandLine contains "-ma"))
  lsass_in_command_line:
    description: This query shows all command lines that contain the string lsass.
    metadata:
    args:
      query: |-
        {table_process}
        | where Timestamp >= datetime({start})
        | where Timestamp <= datetime({end})
        | where not(FileName has_any("lsass.exe"))
        | where (ProcessCommandLine has_any("lsass"))
  reg_accessing_sam_database:
    description: This query shows reg.exe accessing the SAM database.
    metadata:
    args:
      query: |-
        {table_process}
        | where Timestamp >= datetime({start})
        | where Timestamp <= datetime({end})
        | where FileName =~ 'reg.exe'
            and ProcessCommandLine has 'save'
            and ProcessCommandLine has 'hklm'
            and ProcessCommandLine has 'sam'
        | project DeviceId, Timestamp, InitiatingProcessId,
        InitiatingProcessFileName, ProcessId, FileName, ProcessCommandLine
  turning_on_wdigest_caching:
    description: This query shows wdigest being enabled, possibly for credential dumping.
    metadata:
    args:
      query: |-
        union {table_registry}, {table_process}
        | where RegistryKey contains "wdigest" and RegistryValueName == "UseLogonCredential" and 
        RegistryValueData == "1" or 
        ProcessCommandLine has "WDigest" and ProcessCommandLine has "UseLogonCredential" and 
        ProcessCommandLine has "dword" and ProcessCommandLine has "1"
        | project Timestamp, DeviceName, PreviousRegistryValueData,  
        RegistryKey, RegistryValueName, RegistryValueData, FileName, ProcessCommandLine, 
        InitiatingProcessAccountName, InitiatingProcessFileName, 
        InitiatingProcessCommandLine, InitiatingProcessParentFileName
  code_injection_into_lsass:
    description: Code injection into LSASS.
    metadata:
    args:
      query: |-
        {table_device}
        | where Timestamp >= datetime({start})
        | where Timestamp <= datetime({end})
        | where ActionType has_any("CreateRemoteThreadApiCall","QueueUserApcRemoteApiCall","WriteProcessMemoryApiCall","SetThreadContextRemoteApiCall")
        | where FileName has_any("lsass")
  searching_sysvol_for_passwords_via_command_line:
    description: Looks for CommandLine containing password and sysvol and xml to indicate potential GPP scanning.
    metadata:
    args:
      query: |-
        {table_process}
        | where Timestamp >= datetime({start})
        | where Timestamp <= datetime({end})
        | where ProcessCommandLine has_any("password")
        | where (ProcessCommandLine contains "sysvol" and ProcessCommandLine has_any(".xml"))
  accessing_known_gpp_xmls_in_sysvol:
    description: Accessing the known GPP xml files via file events table.
    metadata:
    args:
      query: |-
        {table_file}
        | where Timestamp >= datetime({start})
        | where Timestamp <= datetime({end})
        | where FolderPath has_any("sysvol")
        | where FileName has_any("scheduledTasks.xml", "groups.xml", "services.xml", "datasources.xml", "printers.xml", "drives.xml")
  findstr_being_used_to_look_for_passwords:
    description: Looks for the strings findstr and password present in the commandline
    metadata:
    args:
      query: |-
        {table_process}
        | where Timestamp >= datetime({start})
        | where Timestamp <= datetime({end})
        | where ProcessCommandLine contains "findstr" and ProcessCommandLine contains "password"